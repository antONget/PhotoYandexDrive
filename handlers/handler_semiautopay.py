from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter


from keyboards.keyboard_semiautopay import keyboard_check_payment, keyboard_send_check
from keyboards.start_keyboard import keyboard_not_public_link
from config_data.config import Config, load_config
from database import requests as rq
from database.models import Frame, Order
from services.yandex_drive import get_download_link, get_photo_view_link
from utils.send_admins import send_text_admins

from datetime import datetime
import logging


router = Router()
config: Config = load_config()


class StateSemiAutoPay(StatesGroup):
    chek_pay = State()


@router.callback_query(F.data.startswith('semiautopay'))
async def process_select_item_semi_auto_pay(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """
    –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ (—Ç–æ–≤–∞—Ä–∞) –¥–ª—è –æ–ø–ª–∞—Ç—ã
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'process_select_item_semi_auto_pay: {callback.message.chat.id}')
    item_semi_auto_pay = int(callback.data.split('_')[-1])
    await state.update_data(frame_id=item_semi_auto_pay)
    frame: Frame = await rq.get_frame_id(id_=item_semi_auto_pay)
    cost = 3000
    if frame:
        cost = frame.cost
    data = await state.get_data()
    path = data['path']
    event = path.split('/')[-3]
    team = path.split('/')[-1]
    await callback.message.edit_text(text=f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π {event}/{team}'
                                          f' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å {cost} ‚ÇΩ.\n\n'
                                          f'üí∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ <code>TINKOFF</code> –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n'
                                          f'üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –í–ª–∞–¥–µ–ª–µ—Ü –∫–∞—Ä—Ç—ã\n'
                                          f'üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: –í–∞—à –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n'
                                          f'üí∏ –ö –æ–ø–ª–∞—Ç–µ: {cost} ‚ÇΩ\n\n'
                                          f'üì∑ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª" –∏'
                                          f' –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.\n\n',
                                     reply_markup=keyboard_send_check(id_frame=item_semi_auto_pay))
    await callback.answer()


@router.callback_query(F.data.startswith('send_check_'))
async def process_get_check(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """
    –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ–∫–∞ –æ–ø–ª–∞—Ç—ã
    :param callback: send_check_{id_frame}
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'process_get_check: {callback.message.chat.id}')
    await callback.message.edit_text(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ')
    await state.update_data(id_frame=callback.data.split('_')[-1])
    await state.set_state(StateSemiAutoPay.chek_pay)
    await callback.answer()


@router.message(F.photo, StateFilter(StateSemiAutoPay.chek_pay))
async def get_check_payment(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ–∫–∞ –æ–ø–ª–∞—Ç—ã
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'get_check_payment: {message.chat.id}')
    await message.answer(text='–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!')
    await state.set_state(state=None)
    data = await state.get_data()
    id_frame: str = data['id_frame']
    path = data['path']
    event = path.split('/')[-3]
    team = path.split('/')[-1]
    current_date = datetime.now()
    current_date_str = current_date.strftime('%d-%m-%Y %H:%M')
    data_order = {'tg_id': message.from_user.id,
                  'frame_id': int(id_frame),
                  'date_payment': current_date_str,
                  'team': team,
                  'event': event,
                  'path_folder': path,
                  'status_order': rq.StatusOrder.process}
    order_id: int = await rq.add_order(data=data_order)
    for admin in config.tg_bot.admin_ids.split(','):
        try:
            await bot.send_photo(chat_id=admin,
                                 photo=message.photo[-1].file_id,
                                 caption=f'<a href="tg://user?id={message.from_user.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –æ–ø–ª–∞—Ç–∏–ª'
                                         f' –ø–æ–¥–±–æ—Ä–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π {event}/{team}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É',
                                 reply_markup=keyboard_check_payment(order_id=order_id))
        except:
            pass


@router.callback_query(F.data.startswith('payment_'))
async def process_confirm_cancel_payment(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
    :param callback: payment_cancel_{order_id} | payment_confirm_{order_id}
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'process_confirm_cancel_payment: {callback.message.chat.id}')
    payment: str = callback.data.split('_')[-2]
    order_id: int = int(callback.data.split('_')[-1])
    info_order: Order = await rq.get_order_id(id_=order_id)
    path = info_order.path_folder
    event = path.split('/')[-3]
    team = path.split('/')[-1]
    await callback.message.edit_reply_markup(reply_markup=None)
    if payment == 'cancel':
        await callback.message.answer(text='–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω',
                                      reply_markup=keyboard_not_public_link())
        await bot.send_message(chat_id=info_order.tg_id,
                               text='–í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω!')
    elif payment == 'confirm':
        link_original = await get_photo_view_link(file_path=path.replace('preview', 'original'))
        if link_original:
            await callback.message.answer(text=f'<a href="tg://user?id={info_order.tg_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>'
                                               f' –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º —Å–æ–±—ã—Ç–∏—è'
                                               f' {event}: –∫–æ–º–∞–Ω–¥–∞ {team} ')
            await bot.send_message(chat_id=info_order.tg_id,
                                   text=f'–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –û—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º —Å–æ–±—ã—Ç–∏—è'
                                        f' {event}: –∫–æ–º–∞–Ω–¥–∞ {team}\n\n'
                                        f'{link_original}',
                                   reply_markup=keyboard_not_public_link())
        else:
            await callback.message.answer(text='–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —ç–∫–∏–ø–∞–∂–∞ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –∫–∞–∫ –æ–Ω–∏ –±—É–¥—É—Ç'
                                               ' –∑–∞–≥—Ä—É–∂–µ–Ω—ã –º—ã –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º.',
                                          reply_markup=keyboard_not_public_link())
            await send_text_admins(bot=bot,
                                   text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://userid?id={callback.from_user.id}">'
                                        f'{callback.from_user.username}</a> –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–±–æ—Ä–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π '
                                        f'<b>{event} —ç–∫–∏–ø–∞–∂ {team}</b> –Ω–æ  —Å—Å—ã–ª–∫—É –Ω–µ –ø–æ–ª—É—á–∏–ª')
        await rq.update_order_id(id_=order_id)

    await callback.answer()